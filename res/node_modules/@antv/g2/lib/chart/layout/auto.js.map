{"version":3,"file":"auto.js","sourceRoot":"","sources":["../../../src/chart/layout/auto.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAClC,2CAAgD;AAEhD,wCAAuC;AACvC,8CAAiE;AAEjE,6CAA2C;AAE3C;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,IAAU;IACzC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAE7B,+BAA+B;IAC/B,IAAI,CAAC,uBAAa,CAAC,OAAO,CAAC,EAAE;QAC3B,OAAO,sBAAY,CAAC,OAAO,CAAC,CAAC;KAC9B;IAED,qCAAqC;IAC7B,IAAA,QAAQ,GAAkB,IAAI,SAAtB,EAAE,WAAW,GAAK,IAAI,YAAT,CAAU;IAEvC,IAAM,UAAU,GAAG,IAAI,wBAAU,EAAE,CAAC;IAEpC,WAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,UAAC,EAAmB;QACrC,IAAA,SAAS,GAAW,EAAE,UAAb,EAAE,IAAI,GAAK,EAAE,KAAP,CAAQ;QAE/B,+BAA+B;QAC/B,IAAI,IAAI,KAAK,yBAAc,CAAC,IAAI,IAAI,IAAI,KAAK,yBAAc,CAAC,OAAO,EAAE;YACnE,OAAO;SACR;QAED,IAAM,UAAU,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;QAC7C,IAAM,aAAa,GAAG,IAAI,WAAI,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QAEhG,IAAI,IAAI,KAAK,yBAAc,CAAC,IAAI,EAAE;YAChC,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9C,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC3B;aAAM;YACL,iBAAiB;YACjB,IAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;YAE/B,oBAAoB;YACpB,6GAA6G;YAC7G,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;SAC1C;IACH,CAAC,CAAC,CAAC;IAEH,IAAM,iBAAiB,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;IAElD,IAAI,WAAW,EAAE;QACf,oBAAoB;QACpB,OAAO;YACL,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;SAC/C,CAAC;KACH;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAlDD,4CAkDC","sourcesContent":["import { each } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../constant';\nimport { ComponentOption, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { isAutoPadding, parsePadding } from '../../util/padding';\nimport View from '../view';\nimport { PaddingCal } from './padding-cal';\n\n/**\n * @ignore\n * 根据 view 中的组件，计算实际的 padding 数值\n * @param view\n */\nexport function calculatePadding(view: View): Padding {\n  const padding = view.padding;\n\n  // 如果不是 auto padding，那么直接解析之后返回\n  if (!isAutoPadding(padding)) {\n    return parsePadding(padding);\n  }\n\n  // 是 auto padding，根据组件的情况，来计算 padding\n  const { viewBBox, autoPadding } = view;\n\n  const paddingCal = new PaddingCal();\n\n  each(view.getComponents(), (co: ComponentOption) => {\n    const { component, type } = co;\n\n    // grid, tooltip 不参入 padding 布局\n    if (type === COMPONENT_TYPE.GRID || type === COMPONENT_TYPE.TOOLTIP) {\n      return;\n    }\n\n    const bboxObject = component.getLayoutBBox();\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n\n    if (type === COMPONENT_TYPE.AXIS) {\n      const exceed = componentBBox.exceed(viewBBox);\n      paddingCal.shrink(exceed);\n    } else {\n      // 按照方向计算 padding\n      const direction = co.direction;\n\n      // const direction =\n      //   type === COMPONENT_TYPE.AXIS ? getTranslateDirection(co.direction, view.getCoordinate()) : co.direction;\n      paddingCal.inc(componentBBox, direction);\n    }\n  });\n\n  const calculatedPadding = paddingCal.getPadding();\n\n  if (autoPadding) {\n    // 取上一次以及当前计算结果的最大区间\n    return [\n      Math.max(autoPadding[0], calculatedPadding[0]),\n      Math.max(autoPadding[1], calculatedPadding[1]),\n      Math.max(autoPadding[2], calculatedPadding[2]),\n      Math.max(autoPadding[3], calculatedPadding[3]),\n    ];\n  }\n\n  return calculatedPadding;\n}\n"]}