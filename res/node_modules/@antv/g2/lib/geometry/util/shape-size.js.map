{"version":3,"file":"shape-size.js","sourceRoot":"","sources":["../../../src/geometry/util/shape-size.ts"],"names":[],"mappings":"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","sourcesContent":["import { flatten, isString, valuesOfKey } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n  const count = arr.length;\n  let sourceArr = arr;\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map((v: string) => {\n      return scale.translate(v);\n    });\n  }\n  let distance = sourceArr[1] - sourceArr[0];\n  for (let i = 2; i < count; i++) {\n    const tmp = sourceArr[i] - sourceArr[i - 1];\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n  return distance;\n}\n\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    const mergeData = flatten(dataArray);\n    const values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n\n  return dataArray.length;\n}\n\n/** @ignore */\nexport function getDefaultSize(geometry): number {\n  const theme = geometry.theme;\n  const coordinate = geometry.coordinate;\n  const xScale = geometry.getXScale();\n  const xValues = xScale.values;\n  const dataArray = geometry.beforeMappingData;\n  let count: number = xValues.length;\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    const interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n\n  const range = xScale.range;\n  let normalizedSize = 1 / count;\n  let wr = 1;\n  if (coordinate.isPolar) {\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = theme.multiplePieWidthRatio;\n    } else {\n      wr = theme.roseWidthRatio;\n    }\n  } else {\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n    wr = theme.columnWidthRatio;\n  }\n  normalizedSize *= wr;\n  if (geometry.getAdjust('dodge')) {\n    const dodgeAdjust = geometry.getAdjust('dodge');\n    const dodgeBy = dodgeAdjust.dodgeBy;\n    const dodgeCount = getDodgeCount(dataArray, dodgeBy);\n\n    normalizedSize = normalizedSize / dodgeCount;\n  }\n\n  // 最大和最小限制\n  const { maxColumnWidth, minColumnWidth } = theme;\n  const xDimensionLength = getXDimensionLength(geometry.coordinate);\n  if (maxColumnWidth) {\n    const normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n\n  if (minColumnWidth) {\n    const normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n\n  return normalizedSize;\n}\n"]}