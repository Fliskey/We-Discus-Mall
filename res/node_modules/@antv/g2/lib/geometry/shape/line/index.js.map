{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/geometry/shape/line/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, Position, RangePoint, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nimport { splitPoints } from '../util/split-points';\nimport { getLineMarker } from './util';\n\nfunction getShapeAttrs(cfg: ShapeInfo, smooth?: boolean, constraint?: Position[]) {\n  const { isStack, connectNulls, isInCircle } = cfg;\n  const points = getPathPoints(cfg.points, connectNulls); // 根据 connectNulls 值处理 points\n\n  let path = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const eachLinePoints = points[i];\n    path = path.concat(getPath(eachLinePoints, isInCircle, isStack, smooth, constraint));\n  }\n  const shapeAttrs = getStyle(cfg, true, false, 'lineWidth');\n  shapeAttrs.path = path;\n\n  return shapeAttrs;\n}\n\n// 单条 path\nfunction getSinglePath(points: Point[], isInCircle: boolean, smooth?: boolean, constraint?: Position[]) {\n  let path;\n  if (!smooth) {\n    path = getLinePath(points, false);\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  } else {\n    // 直角坐标系下绘制曲线时限制最大值、最小值\n    if (isInCircle && points.length) {\n      points.push({ x: points[0].x, y: points[0].y });\n    }\n    path = getSplinePath(points, false, constraint);\n  }\n\n  return path;\n}\n\nfunction getRangePath(\n  points: RangePoint[],\n  isInCircle: boolean,\n  isStack?: boolean,\n  smooth?: boolean,\n  constraint?: Position[]\n) {\n  const topPoints = [];\n  const bottomPoints = [];\n  each(points, (point: RangePoint) => {\n    const result = splitPoints(point);\n    topPoints.push(result[1]); // 上边\n    bottomPoints.push(result[0]); // 底边\n  });\n\n  const topPath = getSinglePath(topPoints, isInCircle, smooth, constraint);\n  const bottomPath = getSinglePath(bottomPoints, isInCircle, smooth, constraint);\n  if (isStack) {\n    return topPath;\n  }\n  return topPath.concat(bottomPath);\n}\n\nfunction getPath(\n  points: Point[] | RangePoint[],\n  isInCircle: boolean,\n  isStack?: boolean,\n  smooth?: boolean,\n  constraint?: Position[]\n) {\n  const first = points[0];\n\n  return isArray(first.y)\n    ? getRangePath(points as RangePoint[], isInCircle, isStack, smooth, constraint)\n    : getSinglePath(points as Point[], isInCircle, smooth, constraint);\n}\n\nconst LineShapeFactory = registerShapeFactory('line', {\n  defaultShapeType: 'line',\n});\n\n// 这里因为代码公用，所以直接全部注册\n// 'line' 默认折线；'dot' 点线 ···；'dash' 断线 - - -\neach(['line', 'dot', 'dash', 'smooth'], (shapeType) => {\n  registerShape('line', shapeType, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      const smooth = shapeType === 'smooth';\n      let constraint;\n      if (smooth) {\n        const { start, end } = this.coordinate;\n        constraint = [\n          [start.x, end.y],\n          [end.x, start.y],\n        ];\n      }\n\n      const attrs = getShapeAttrs(cfg, smooth, constraint);\n      const shape = container.addShape({\n        type: 'path',\n        attrs,\n        name: 'line',\n      });\n\n      return shape;\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    },\n  });\n});\n\nexport default LineShapeFactory;\n"]}