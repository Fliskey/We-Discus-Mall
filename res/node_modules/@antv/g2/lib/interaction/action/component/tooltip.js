"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var base_1 = tslib_1.__importDefault(require("../base"));
// 判断是否有样式
function hasClass(dom, className) {
    if (!dom) {
        return false;
    }
    var cls = '';
    if (!dom.className) {
        return false;
    }
    if (!util_1.isNil(dom.className.baseVal)) {
        cls = dom.className.baseVal;
    }
    else {
        cls = dom.className;
    }
    return cls.includes(className);
}
function isParent(dom, cls) {
    var parent = dom.parentNode;
    var rst = false;
    while (parent && parent !== document.body) {
        if (hasClass(parent, cls)) {
            rst = true;
            break;
        }
        parent = parent.parentNode;
    }
    return rst;
}
/**
 * Tooltip 展示隐藏的 Action
 * @ignore
 */
var TooltipAction = /** @class */ (function (_super) {
    tslib_1.__extends(TooltipAction, _super);
    function TooltipAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.timeStamp = 0;
        return _this;
    }
    /**
     * 显示 Tooltip
     * @returns
     */
    TooltipAction.prototype.show = function () {
        var context = this.context;
        var ev = context.event;
        var view = context.view;
        var isTooltipLocked = view.isTooltipLocked();
        if (isTooltipLocked) {
            // 锁定时不移动 tooltip
            return;
        }
        var lastTimeStamp = this.timeStamp;
        var timeStamp = +new Date();
        if (timeStamp - lastTimeStamp > 16) {
            var preLoc = this.location;
            var curLoc = { x: ev.x, y: ev.y };
            if (!preLoc || !util_1.isEqual(preLoc, curLoc)) {
                this.showTooltip(view, curLoc);
            }
            this.timeStamp = timeStamp;
            this.location = curLoc;
        }
    };
    /**
     * 隐藏 Tooltip。
     * @returns
     */
    TooltipAction.prototype.hide = function () {
        var view = this.context.view;
        var isTooltipLocked = view.isTooltipLocked();
        if (isTooltipLocked) {
            // 锁定 tooltip 时不隐藏
            return;
        }
        var event = this.context.event;
        var toElement = util_1.get(event, ['gEvent', 'originalEvent', 'toElement']);
        if (toElement && (hasClass(toElement, 'g2-tooltip') || isParent(toElement, 'g2-tooltip'))) {
            // 当鼠标滑入 tooltip 内容框时不隐藏
            return;
        }
        this.hideTooltip(view);
        this.location = null;
    };
    TooltipAction.prototype.showTooltip = function (view, point) {
        // 相同位置不重复展示
        view.showTooltip(point);
    };
    TooltipAction.prototype.hideTooltip = function (view) {
        view.hideTooltip();
    };
    return TooltipAction;
}(base_1.default));
exports.default = TooltipAction;
//# sourceMappingURL=tooltip.js.map