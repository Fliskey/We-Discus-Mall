{"version":3,"file":"link-by-color.js","sourceRoot":"","sources":["../../../../src/interaction/action/element/link-by-color.ts"],"names":[],"mappings":"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","sourcesContent":["import Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport Element from '../../../geometry/element/';\nimport { each } from '@antv/util';\nimport { LooseObject} from '../../../interface';\nimport { IGroup} from '../../../dependents';\n\n/**\n * Link Elements by color\n * @ignore\n */\nclass LinkByColor extends Action {\n  private linkGroup: IGroup;\n  private cache: LooseObject = {};\n  // 获取颜色对应的 scale\n  private getColorScale(view, element) {\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }\n  // 获取连接的 path\n  private getLinkPath(element: Element, nextElement: Element) {\n    const bbox = element.shape.getCanvasBBox();\n    const nextBBox= nextElement.shape.getCanvasBBox();\n    const path = [\n      ['M', bbox.maxX, bbox.minY],\n      ['L', nextBBox.minX, nextBBox.minY],\n      ['L', nextBBox.minX, nextBBox.maxY],\n      ['L', bbox.maxX, bbox.maxY],\n      ['Z']\n    ]\n    return path;\n  }\n  // 添加连接的图形\n  private addLinkShape(group, element: Element, nextElement: Element) {\n    group.addShape({\n      type: 'path',\n      attrs: {\n        opacity: 0.4,\n        fill: element.shape.attr('fill'),\n        path: this.getLinkPath(element, nextElement)\n      }\n    });\n  }\n  // 使用图形连接\n  private linkByElement(element: Element) {\n    const view = this.context.view;\n    const scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      const elements = getElementsByField(view, scale.field, value);\n      const linkGroup = this.linkGroup;\n      const group = linkGroup.addGroup();\n      this.cache[value] = group; // 缓存\n      const count = elements.length;\n      each(elements, (el, index) => {\n        if (index < count -1) {\n          const nextEl = elements[index + 1];\n          this.addLinkShape(group, el, nextEl);\n        }\n      });\n    }\n  }\n  // 移除连接\n  private removeLink(element) {\n    const scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  }\n\n  /**\n   * 连接 elements\n   */\n  public link() {\n    const context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        capture: false\n      });\n    }\n    const element =  getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element);\n    }\n  }\n\n  /**\n   * 取消连接 elements\n   */\n  unlink() {\n    const element =  getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  }\n\n  /**\n   * 清除所有连接\n   */\n  clear() {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    super.destroy();\n    if(this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  }\n}\nexport default LinkByColor;"]}