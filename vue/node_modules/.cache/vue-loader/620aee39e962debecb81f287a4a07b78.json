{"remainingRequest":"D:\\隔离\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\隔离\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\隔离\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\隔离\\vue\\src\\views\\home\\home.vue?vue&type=template&id=39f87be5&scoped=true&","dependencies":[{"path":"D:\\隔离\\vue\\src\\views\\home\\home.vue","mtime":1625468584000},{"path":"D:\\隔离\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\隔离\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\隔离\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\隔离\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}